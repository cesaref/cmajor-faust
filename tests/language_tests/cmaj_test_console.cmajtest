//
//     ,ad888ba,                              88
//    d8"'    "8b
//   d8            88,dba,,adba,   ,aPP8A.A8  88     (C)2024 Cmajor Software Ltd
//   Y8,           88    88    88  88     88  88
//    Y8a.   .a8P  88    88    88  88,   ,88  88     https://cmajor.dev
//     '"Y888Y"'   88    88    88  '"8bbP"Y8  88
//                                           ,88
//                                        888P"
//
//  This code may be used under either a GPLv3 or commercial
//  license: see LICENSE.md for more details.


## testConsole ("Writing multiple types including structs 1 2.5 {\"_objectName\":\"S\",\"i\":1,\"f\":2} {\"_objectName\":\"complex32\",\"real\":1,\"imag\":2}")

processor test
{
    output stream float32 out;

    struct S
    {
        int i;
        float f;
    }

    void main()
    {
        let s = S (1, 2.0f);

        console <- "Writing multiple types including structs ";
        console <- 1 <- " ";
        console <- 2.5f <- " ";
        console <- s <- " " <- complex32 (1, 2);
        advance();
    }
}

## testConsole ("100", { sessionID : 100 })

processor test
{
    output stream int32 out;

    void main()
    {
        console <- processor.session;
        advance();
    }
}

## testConsole ("hello_world")

processor P
{
    output stream int out;
    void main()  { console <- "hello_world"; loop { out <- -1; advance(); } }
}

## testConsole ("1234abcd1893_9999.9_1234.5")

processor P
{
    output stream int out;

    void main()
    {
        write();
        loop { out <- -1; advance(); }
    }

    void write()  { console <- 1234 <- "abcd" <- 0x765 <- "_" <- 9999.9 <- "_" <- 1234.5f; }
}

## testConsole ("hello_world")

graph test [[main]]
{
    output stream int out;
    connection P.out -> out;
}

processor P
{
    output stream int out;
    void main()  { console <- "hello_world"; loop { out <- -1; advance(); } }
}

## testConsole ("hello_world")

graph test [[main]]
{
    output event string out;
    connection P.out -> console;
}

processor P
{
    output event string out;
    void main()  { console <- "hello_"; out <- "world"; advance();  }
}

## testConsole ("1world")

graph test [[main]]
{
    output event string out;
    connection P.out -> console;
}

processor P
{
    output event string out;
    void main()  { console <- 1; out <- "world"; advance();  }
}

## testConsole ("hello_world")

graph test [[main]]
{
    output stream int out;
    connection G1 -> out;
}

graph G1
{
    output stream int out;
    connection P -> out;
}

processor P
{
    output stream int out;
    void main()  { console <- "hello_world"; loop { out <- -1; advance(); } }
}

## testConsole ("1234")

graph G [[ main ]]
{
    output stream int out;

    node p = P;
    connection p -> out;
}

processor P
{
    output stream int out;

    void main()
    {
        write();
        loop { out <- -1; advance(); }
    }

    void write()  { console <- getVal(); }
    int getVal() { return 1234; }
}

## expectError ("8:12: error: Cannot connect in (stream) to console (event)")

graph G [[ main ]]
{
    input stream float in;
    output stream float out;

    connection
        in -> console;
}

## testConsole ("[[1,0],[4,0]][[1,4],[0,0]]")

processor TranposeTest() [[main]]
{
    output stream float32 out;

    T.elementType.elementType<m.size>[m[0].size] transpose<T> (const T& m)
    {
        T.elementType.elementType<m.size>[m[0].size] result;

        for(wrap<m.size> i)
        {
            let v = m[i];

            for(wrap<v.size> j)
                result[j][i] = v[j];
        }

        return result;
    }

    void main()
    {
        let m = float<2>[2] ((1.0f, 0.0f),(4.0f, 0.0f));

        console <- m;
        console <- transpose(m);

        advance();
    }
}

## testConsole ("[[1,2],[3,4],[5,6]] -> [[1,3,5],[2,4,6]]")

processor Test
{
    output stream float out;

    T.elementType.elementType<m.size>[m[0].size] transpose<T> (const T& m)
    {
        T.elementType.elementType<m.size>[m[0].size] result;

        for(wrap<m.size> i)
        {
            let v = m[i];

            for(wrap<v.size> j)
                result[j][i] = v[j];
        }

        return result;
    }

    void main()
    {
        float<2>[3] a = ((1, 2), (3, 4), (5, 6));

        console <- a;
        console <- " -> ";
        console <- transpose (a);

        advance();
    }
}


## testCompile()

graph Test [[ main ]]
{
    output event test::A out;

    node p = P;

    connection p -> out;
}

processor P
{
    output event test::A out;

    void main()
    {
        let a = test::create();
        out <- a;
        console <- a;

        advance();
    }
}

namespace test
{
    struct A {}

    A create()
    {
        return A();
    }
}


## testConsole ("1 2 3 4 0 1 2 3 4 ")
processor Test
{
    output stream float out;

    void main()
    {
        console <- 1.0f;
        console <- " ";
        console <- 2.0;
        console <- " ";
        console <- 3;
        console <- " ";
        console <- 4i64;
        console <- " ";

        for (wrap<5> i)
        {
            console <- i;
            console <- " ";
        }

        advance();
    }
}


## expectError ("11:24: error: Cannot determine the type of the value to be written to this endpoint")

processor Test [[ main ]]
{
    output stream int out;

    void main()
    {
        loop
        {
            float[2 + int(processor.frequency)] z;
            console <- z;
            advance();
        }
    }
}

## if (getEngineName() != "cpp") testConsole

processor Test [[ main ]]
{
    output stream int out;

    void main()
    {
        loop
        {
            float[2 + int(processor.frequency)] z;
            float f = z[1];
            console <- f;
            advance();
        }
    }
}


## expectError ("11:26: error: Cannot determine the type of the value to be written to this endpoint")

processor Test [[ main ]]
{
    output stream int out;

    void main()
    {
        loop
        {
            float[2 + int(processor.frequency)] z;
            console <- z[1];
            advance();
        }
    }
}


## testConsole ("[[1,0,0,0],[0,2,0,0],[0,0,3,0]]")

processor Test
{
    output stream float out;

    void main()
    {
        float[3,4] v;

        v[0,0] = 1;
        v[1,1] = 2;
        v[2,2] = 3;

        console <- v;

        advance();
    }
}

## testConsole ("1234")

graph Test [[ main ]]
{
    output stream float out;

    node voices = Voice[4];

    connection
        voices.out -> out;
}

graph Voice
{
    output stream float out;

    node v = VoiceComponent;

    connection
        v.out -> out;
}

processor VoiceComponent
{
    output stream float out;

    void main()
    {
        console <- processor.id;
        advance();
    }
}
